@using Castellano.Helpers
@using Castellano.Web.UI.Helper

@model Castellano.Web.UI.Areas.Administracion.Models.MenuItem

@{
    ViewBag.Title = "ItemsMenu";
    Layout = "~/Views/Shared/_LayoutLogged.cshtml";
}

<div class="panel panel-default panel-default-fe">
    <div class="panel-heading panel-heading-fe">
        <h4>Administración de ítems de menú</h4>
    </div>
    <div class="panel-body">
        <div class="form-horizontal">
            <div class="form-group">
                @Html.LabelFor(x => x.AplicacionId, new { @for = "aplicacion", @class = "col-sm-4 control-label" })
                <div class="col-sm-5">
                    @Html.DropDownListFor(x => x.AplicacionId, Castellano.Membresia.Aplicacion.Aplicaciones, new { @id = "aplicacion", @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-offset-7 col-sm-3">
                    <button id="cancelOrder" class="btn btn-danger">Cancelar</button>
                    <button id="saveOrder" class="btn btn-primary">Guardar</button>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-md-offset-3">
            <span id="menuItems" />
        </div>
    </div>
</div>

<form id="modalForm">

    @Html.AntiForgeryToken()

    @Html.Hidden("aplicacionId")

    <div id="form-primary" class="md-modal colored-header success md-effect-9">
        <div class="md-content">
            <div class="modal-header">
                <h3>Aplicación</h3>
                <button type="button" data-dismiss="modal" aria-hidden="true" class="close md-close">×</button>
            </div>
            <div class="modal-body form">
                @Html.AntiForgeryToken()

                @Html.Hidden("menuItemId")

                <div class="row">
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.LabelFor(x => x.AplicacionId, new { @for = "aplicacionLabel", @class = "control-label" })
                            @Html.TextBoxFor(x => x.AplicacionId, new { @class = "form-control", @id = "aplicacion", @disabled = "false" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.Titulo, new { @for = "titulo", @class = "control-label" })
                            @Html.TextBoxFor(x => x.Titulo, new { @class = "form-control", @id = "titulo", @placeholder = "Titulo", @maxLength = "80" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.ToolTip, new { @for = "toolTip", @class = "control-label" })
                            @Html.TextAreaFor(x => x.ToolTip, new { @class = "form-control", @id = "toolTip", @placeholder = "ToolTip" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.Informacion, new { @for = "informacion", @class = "control-label" })
                            @Html.TextAreaFor(x => x.Informacion, new { @class = "form-control", @id = "informacion", @placeholder = "Información" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.Icono, new { @for = "icono", @class = "control-label" })
                            @Html.TextBoxFor(x => x.Icono, new { @class = "form-control", @id = "icono", @placeholder = "Ícono", @maxLength = "70" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.Url, new { @for = "url", @class = "control-label" })
                            @Html.TextBoxFor(x => x.Url, new { @class = "form-control", @id = "url", @placeholder = "URL", @maxLength = "256", @disabled = "false" })
                        </div>
                        <div class="form-group">
                            <div class="checkbox">
                                <label>
                                    @Html.CheckBoxFor(m => m.Visible)
                                    @Html.LabelFor(m => m.Visible)
                                </label>
                            </div>
                        </div>
                    </div>
                    <div id="menuTreeView" class="col-md-5 scrollDivMenu">
                        @Html.TreeViewMenu()
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" data-dismiss="modal" class="btn btn-danger btn-flat md-close">Cancelar</button>
                    <button type="submit" data-dismiss="modal" class="btn btn-primary btn-flat">Guardar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="md-overlay"></div>
</form>

@Html.Hidden("menuJson")

@Scripts.Render("~/Content/js/jquery.nestable")

<script type="text/javascript">

    jQuery(document).ready(function () {

        $('#aplicacion').change(function () {

            if ($(this).val() == '-1') {

                $('#menuItems').html('');
            }
            else {

                $.getJSON('/Administracion/Admin/GetItemsMenu/' + $(this).val(), function (data) {

                    $('#menuItems').html(data);

                    menu();
                });
            }
        })

        $(document).on('click', 'a[typeButton=Add]', function () {



        });

        $(document).on('click', 'a[typeButton=Edit]', function () {



        });

        $(document).on('click', 'a[typeButton=Delete]', function () {

            alert('delete');

        });

        $('#cancelOrder').click(function () {

            //alert('aqui');

            $('#menu').nestable('destroy');

        });

        $('#saveOrder').click(function () {

            //var obj = JSON.stringify(eval("(" + $('#menuJson').val() + ")"));

            var obj = {
                data: JSON.stringify(eval("(" + $('#menuJson').val() + ")"))
            };

            $.ajax({
                type: "POST",
                url: "/Administracion/Admin/GetOrder",
                data: obj,
                success: function () {

                    swal("Listo!", "El orden fue guardado correctamente", "success");
                },
                error: function (data) {

                    swal("Error!", "Se ha producido un error al registrar el orden", "error");
                }
            });
        });

        $('label.tree-toggler').click(function () {
            var icon = $(this).children(".fa");
            if (icon.hasClass("fa-folder-open-o")) {
                icon.removeClass("fa-folder-open-o").addClass("fa-folder-o");
            } else {
                icon.removeClass("fa-folder-o").addClass("fa-folder-open-o");
            }

            $(this).parent().children('ul.tree').toggle(300, function () {
                $(this).parent().toggleClass("open");
                $(".tree .nscroller").nanoScroller({ preventPageScrolling: true });
            });
        });

        $('#menuTreeView a').on('click', function () {

            $('#url').val($(this).attr('data-value'));

        });
    });

    function menu() {

        var updateOutput = function (e) {

            if (e.length) {
                var a = e;
            }
            else {
                var b = $(e.target);
            }

            var list = e.length ? e : $(e.target);

            output = list.data('output');

            if (output != null) {

                if (window.JSON) {

                    output.val(window.JSON.stringify(list.nestable('serialize')));

                } else {

                    output.val('JSON browser support required for this demo.');
                }
            }

            $('.md-trigger').modalEffects();
        };

        $('#menu').nestable({
            group: 1
        }).on('change', updateOutput);

        updateOutput($('#menu').data('output', $('#menuJson')));
    }

</script>
